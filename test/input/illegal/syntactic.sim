%%% global-var-decl
var t : int;
const c : int = 1;

%%% bad-var-decl
export func main()
  var i;
end

%%% tuple-field
element E
  t : int;
  v : (int * 2);
end

%%% bad-func-decl
func foo
end

%%% inout-result
func foo(i : int) -> (inout r : int)
end

%%% inout-extern
extern inout i : int;

%%% var-tuple
export func main()
  var t : int;
  var u : (int * 2);
end

%%% uninitialized-const
const c : int;
const d : int = 1;

%%% bad-whiles
export func main()
  while while
  end
  while while
  end
end

%%% bad-do-whiles
export func main()
  do
    i = 1;
  end while =
  do
    i = 1;
  end while =
end

%%% bad-ifs
export func main()
  if set
  end
  if int
  end
end

%%% bad-elifs
export func main()
  if true
    i = 1;
  elif =
  elif set
  end
end

%%% bad-if-elif
export func main()
  if set
  elif set
  end
end

%%% bad-fors
export func main()
  for i 1:2
  end
  for i 1:2
  end
end

%%% bad-prints
export func main()
  print ; 
  print ; 
end

%%% bad-assign-1
export func main()
  = 1;
end

%%% bad-expr-1
export func main()
  1 + * 2;
end

%%% bad-expr-2
export func main()
  1 and or 2;
end

%%% bad-type
func f(a : 1)
end

%%% bad-tensor-type-1
export func main()
  var a : 1;
end

%%% bad-tensor-type-2
export func main()
  var a : tensor(tensor);
end

%%% bad-vector-type-1
export func main()
  var a : vector[2,2](int);
end

%%% bad-vector-type-2
export func main()
  var a : vector[2](tensor[2,2](float));
end

%%% bad-matrix-type-1
export func main()
  var a : matrix[2](int);
end

%%% bad-matrix-type-2
export func main()
  var a : matrix[2,2](tensor[2](float));
end

%%% bad-set-type-1
element E
end

extern A : set{1}; 

%%% bad-set-type-2
element E
end

extern A : set{E};
extern B : set{E}(int);

%%% bad-tuple-type
element E
end

func f(a : (E * E))
end

%%% bad-tensor-lit
export func main()
  v = [1 2[;
end

%%% bad-apply
element V
end

extern S : set{V};

func f(inout v : V)
end

export func main()
  apply f to S reduce +;
end
