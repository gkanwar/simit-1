element Point
  b : tensor[2](float);
  c : tensor[2](float);
end

element Spring
  a : tensor[2,2](float);
end

extern points  : set{Point};
extern springs : set{Spring}(points,points);

extern func gemv(A : tensor[points,points](tensor[2,2](float)), x : tensor[points](tensor[2](float)))
    -> (y : tensor[points](tensor[2](float)));

func dist_a(s : Spring, p : (Point*2)) -> (M : tensor[points,points](tensor[2,2](float)))
  M(p(0),p(0)) = s.a;
  M(p(0),p(1)) = s.a;
  M(p(1),p(0)) = s.a;
  M(p(1),p(1)) = s.a;
end

export func main()
  A = map dist_a to springs reduce +;
  points.c = gemv(A, points.b);
end
