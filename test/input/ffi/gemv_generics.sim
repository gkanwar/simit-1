element Point
  b : float;
  c : float;
end

element Spring
  a : float;
end

extern points  : set{Point};
extern springs : set{Spring}(points,points);

extern particles : set{Point};
extern connections : set{Spring}(particles,particles);

extern func gemv<T>(A : tensor[T,T](float), x : tensor[T](float))
    -> (y : tensor[T](float));

func dist_a<T>(s : Spring, p : (Point*2)) -> (A : tensor[T,T](float))
  A(p(0),p(0)) = s.a;
  A(p(0),p(1)) = s.a;
  A(p(1),p(0)) = s.a;
  A(p(1),p(1)) = s.a;
end

proc main
  A_points = map dist_a to springs reduce +;
  A_particles = map dist_a to connections reduce +;
  
  points.c = gemv(A_points, points.b);
  particles.c = gemv(A_particles, particles.b);
end
