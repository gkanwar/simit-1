element Point
a : float;
b : float;
c : float;
end

element Spring
d: float;
end

extern points  : set{Point};
extern springs : set{Spring}(points,points);

func dist_a2(s : Spring, p : (Point*2)) -> (A : tensor[points,points](tensor[2,2](float)))
  m = [1.0,0.0;0.0,1.0];
  A(p(0),p(0)) = m;
  A(p(0),p(1)) = m;
  A(p(1),p(0)) = m;
  A(p(1),p(1)) = m;
end

func dist_a(p : Point) -> (A : tensor[points,points](tensor[2,2](float)))
  m = [1.0,0.0;0.0,1.0];
  c = p.a;
  if (c>0.0)
    A(p,p) = m;
  end
end

export func main()
  A = map dist_a  to points  reduce +;
  B = map dist_a2 to springs reduce +;
  C = A + B;
  for p in points
    points.c(p) = C(p,p)(1,1);
  end
end
