element Point
  x     : vector[3](float);
  v     : vector[3](float);
  m     : float;
  fixed : bool;
end

element Spring
  k  : float;
  l0 : float;
end

extern points  : set{Point};
extern springs : set{Spring}(points,points);

const g    = [0.0, -10.0, 0.0]';
const h    = 1e-6;
const damp = 0.01;

func compute_a(s : Spring, p : (Point*2))
-> (a : vector[points](vector[3](float)))
  dx = p(1).x - p(0).x;
  l = norm(dx);
  U = dx/l;
  f = s.k * (l-s.l0);
  fe0 = f*U;

  if not p(0).fixed
    a(p(0)) =  (1.0/p(0).m) * fe0 + g;
  end
  if not p(1).fixed
    a(p(1)) = -(1.0/p(1).m) * fe0 + g;
  end
end

export func timestep()
  a = map compute_a to springs reduce +;
  points.v = (1.0 - damp) * points.v + h*a;
  points.x = points.x + points.v;
end
